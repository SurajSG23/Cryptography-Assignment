import java.util.*;
import java.math.*;
import java.nio.charset.*;

public class RSA{
	public static void main(String[] args){
		BigInteger p,q,N,phi,e,d;
		
		p = BigInteger.probablePrime(1024,new Random());
		q = BigInteger.probablePrime(1024,new Random());
		N = p.multiply(q);
		phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
		e = BigInteger.probablePrime(512,new Random());
		
		//e and phi should be co-prime (gcd of e and phi = 1 ) & 0 < e < phi
		while( phi.gcd(e).compareTo(BigInteger.ONE)>0 && e.compareTo(phi)<0){
			e = e.add(BigInteger.ONE);
		}
		
		d = e.modInverse(phi);
		
		System.out.println("Prime number p: "+ p);
		System.out.println("Prime number q: "+ q);
		System.out.println("Public key is: "+ e);
		System.out.println("Private key is: "+ d);
		
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter the plain text: ");
		String testString = sc.nextLine();
		System.out.println("Encrypting String: "+ testString);
		
		byte[] encrypted = new BigInteger(testString.getBytes()).modPow(e,N).toByteArray();
		byte[] decrypted = new BigInteger(encrypted).modPow(d,N).toByteArray();

		System.out.print("Encrypted Bytes: ");
		for(int i=0; i<encrypted.length; i++){ 
			System.out.print(encrypted[i]); 
		}
		System.out.println();
		
		System.out.print("Decrypted Bytes: ");
		for(int i=0; i<decrypted.length; i++){ 
			System.out.print(decrypted[i]); 
		}
		System.out.println();
				
		System.out.println("Decrypted String: " + new String(decrypted, StandardCharsets.UTF_8));
	}
}

//Output

Prime number p: 154288893773697694135804882599026753843801559426943509387350637634366882743661604452330594958548913853073913799604532885757624215129632919597432181691289045081720032402814444074089686802928310488412864087981341767504264534126101423967928529679297730116903776266540335646109048533905166236034166256151729977943
Prime number q: 179111106009266559045579148761777903274690701821600981757018012916440021629171994337482452612649801552417982575877194634405139554739355505872653976735270965274377760377542994838602689087816221614283257991235789273069924699235635879258966306803599123647385635243261712630419324031658247936668897897573965157253
Public key is: 11465093018392702288944194152895276045948805417506292786407816202510518532689729892043299966746663670389568257914888965600157621094407445389582225708803131
Private key is: 17428566284297242696942500087786782905834719726815264179625422445037816529427750663437367866309070026218829894858747966994979357252142708960331705395402834490925269524010995281395483990892911136895856402789480007592452654032878646501934328249926027797542455199903094452342682751320494995366891605173187813013742472731914975174004523890251652358549754749311658596067656583474537224026615272208295591249627304522386488343777513059063109579790253999019762131511624076460466872275296864354356570019478756814819638454294811365687746491921929462065545698259710951345656765371469211345249311208817146315317676225174663748187
Enter the plain text: Hello i am Suraj
Encrypting String: Hello i am Suraj
Encrypted Bytes: 62-365666-119-20-6897-47-8670-66-10632-75-20-28116-65-296413124-538-22-7878-118-11442124-203015-7624127-449124-113143-12-9142-68-82-50-67109-11057548735-6-63-3-26-346076-6815-85956-57-177965115-2426-12-5356-17-41-51-65147932-110-575-31122-31-4-24-11943-5375-94-5492-31112-118-11270826312463-114-118-62-55-985-69-57531715-7-740-16-171037945-2516-64-11670-67208-592735236-57-9410715-52-796642-4976-5218-677-90-7789-9316-25-67-4396-336067-50-119-14-18-1168-1-61187698-102-45115-17-30-64-47-652429-91062259-401334-8512417-74120-4745-52-11066120-759952-63-22491048069226832-95-111-43-7-13108-64-13-126-85-44-95211780985-51-46804830-74-119-17-723232-376713-841
Decrypted Bytes: 72101108108111321053297109328311711497106
Decrypted String: Hello i am Suraj
